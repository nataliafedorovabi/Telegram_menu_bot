import logging
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackContext,
    MessageHandler, filters, ConversationHandler, CallbackQueryHandler
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

WEIGHT, HEIGHT, AGE, ACTIVITY, GOAL = range(5)

# –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
async def start(update: Update, context: CallbackContext):
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ–Ω—é –∏–º–µ–Ω–Ω–æ –ø–æ–¥ —Ç–µ–±—è üòä",
        reply_markup=ReplyKeyboardRemove()
    )
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")
    return WEIGHT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
async def restart_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞! üòä –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):"
    )
    return WEIGHT

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞
async def get_weight(update: Update, context: CallbackContext):
    try:
        context.user_data['weight'] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–≤–æ–π –≤–µ—Å –≤ –∫–≥):")
        return WEIGHT
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")
    return HEIGHT

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞
async def get_height(update: Update, context: CallbackContext):
    try:
        context.user_data['height'] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º):")
        return HEIGHT
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    return AGE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def get_age(update: Update, context: CallbackContext):
    try:
        context.user_data['age'] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç):")
        return AGE

    keyboard = [
        [InlineKeyboardButton("1.2 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="1.2")],
        [InlineKeyboardButton("1.3 - –ù–∏–∑–∫–∞—è", callback_data="1.3")],
        [InlineKeyboardButton("1.38 - –°—Ä–µ–¥–Ω—è—è", callback_data="1.38")],
        [InlineKeyboardButton("1.43 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", callback_data="1.43")],
        [InlineKeyboardButton("1.55 - –í—ã—Å–æ–∫–∞—è", callback_data="1.55")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return ACTIVITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def get_activity(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    context.user_data['activity'] = float(query.data)

    keyboard = [
        [
            InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="–ü–æ—Ö—É–¥–µ—Ç—å"),
            InlineKeyboardButton("–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", callback_data="–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å?", reply_markup=reply_markup)
    return GOAL

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏
async def get_goal(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    goal = query.data
    weight = context.user_data['weight']
    height = context.user_data['height']
    age = context.user_data['age']
    activity = context.user_data['activity']

    base_cal = (655.1 + (9.563 * weight) + (2.35 * height) - (4.676 * age)) * activity
    if goal.lower() == "–ø–æ—Ö—É–¥–µ—Ç—å":
        base_cal *= 0.75

    calories = int(round(base_cal / 100) * 100)
    calories = max(1100, min(1900, calories))

    buy_url = f"https://orlowa.ru/calculator/{calories}"
    button = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=buy_url)]
    ])
    restart_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ])

    await query.edit_message_text(
        f"–¢–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç {calories} –∫–∫–∞–ª –≤ –¥–µ–Ω—å. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –º–µ–Ω—é:",
        reply_markup=button
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ 3 —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏
    folder_path = os.path.join("Telegram_menu_bot", "menus", str(calories))
    if os.path.isdir(folder_path):
        files = sorted(os.listdir(folder_path))[:3]
        for file_name in files:
            file_path = os.path.join(folder_path, file_name)
            if os.path.isfile(file_path):
                with open(file_path, "rb") as f:
                    await context.bot.send_document(chat_id=query.message.chat_id, document=f)
    else:
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∞—à–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ üò¢")

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=restart_inline
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
    TOKEN = "1630388281:AAEm6i0PQOzDYWqE4Plpie5DmMuj4qWOgwk"  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(restart_callback, pattern="^restart$")
        ],
        states={
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            ACTIVITY: [CallbackQueryHandler(get_activity)],
            GOAL: [CallbackQueryHandler(get_goal)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get('PORT', 8443)),
        url_path=TOKEN,
        webhook_url=f"https://your-server.com/{TOKEN}"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å
    )

if __name__ == "__main__":
    main()
