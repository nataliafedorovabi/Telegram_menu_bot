import logging
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackContext,
    MessageHandler, filters, ConversationHandler, CallbackQueryHandler
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

WEIGHT, HEIGHT, AGE, ACTIVITY, GOAL = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: CallbackContext):
	logger.exception("Exception while handling an update: %s", context.error)

# –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
async def start(update: Update, context: CallbackContext):
	context.user_data.clear()
	logger.info("/start: user_id=%s chat_id=%s", getattr(update.effective_user, "id", None), getattr(update.effective_chat, "id", None))
	await update.message.reply_text(
		"–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ–Ω—é –∏–º–µ–Ω–Ω–æ –ø–æ–¥ –≤–∞—Å üòä",
		reply_markup=ReplyKeyboardRemove()
	)
	await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
	return WEIGHT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
async def restart_callback(update: Update, context: CallbackContext):
	query = update.callback_query
	await query.answer()
	logger.info("restart_callback: chat_id=%s", getattr(query.message.chat, "id", None))
	context.user_data.clear()
	await context.bot.send_message(
		chat_id=query.message.chat.id,
		text="–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞! üòä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):"
	)
	return WEIGHT

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞
async def get_weight(update: Update, context: CallbackContext):
	logger.info("get_weight: got text='%s' from chat_id=%s", getattr(update.message, "text", None), getattr(update.effective_chat, "id", None))
	try:
		# –†–∞–∑—Ä–µ—à–∏–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π/–ø—Ä–æ–±–µ–ª–∞–º–∏
		text = update.message.text.replace(",", ".").strip()
		weight_val = float(text)
		context.user_data['weight'] = int(round(weight_val))
	except Exception:
		await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–∞—à –≤–µ—Å –≤ –∫–≥):")
		return WEIGHT
	await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
	return HEIGHT

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞
async def get_height(update: Update, context: CallbackContext):
	logger.info("get_height: got text='%s'", getattr(update.message, "text", None))
	try:
		text = update.message.text.replace(",", ".").strip()
		height_val = float(text)
		context.user_data['height'] = int(round(height_val))
	except Exception:
		await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º):")
		return HEIGHT
	await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
	return AGE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def get_age(update: Update, context: CallbackContext):
	logger.info("get_age: got text='%s'", getattr(update.message, "text", None))
	try:
		text = update.message.text.replace(",", ".").strip()
		age_val = float(text)
		context.user_data['age'] = int(round(age_val))
	except Exception:
		await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç):")
		return AGE

	keyboard = [
		[InlineKeyboardButton("1.2 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="1.2")],
		[InlineKeyboardButton("1.3 - –ù–∏–∑–∫–∞—è", callback_data="1.3")],
		[InlineKeyboardButton("1.38 - –°—Ä–µ–¥–Ω—è—è", callback_data="1.38")],
		[InlineKeyboardButton("1.43 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", callback_data="1.43")],
		[InlineKeyboardButton("1.55 - –í—ã—Å–æ–∫–∞—è", callback_data="1.55")]
	]
	reply_markup = InlineKeyboardMarkup(keyboard)
	await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
	return ACTIVITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def get_activity(update: Update, context: CallbackContext):
	query = update.callback_query
	await query.answer()
	logger.info("get_activity: data=%s", query.data)
	context.user_data['activity'] = float(query.data)

	keyboard = [
		[
			InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="–ü–æ—Ö—É–¥–µ—Ç—å"),
			InlineKeyboardButton("–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", callback_data="–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")
		]
	]
	reply_markup = InlineKeyboardMarkup(keyboard)
	await query.edit_message_text("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å?", reply_markup=reply_markup)
	return GOAL

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏
async def get_goal(update: Update, context: CallbackContext):
	query = update.callback_query
	await query.answer()
	logger.info("get_goal: data=%s", query.data)

	goal = query.data
	weight = context.user_data['weight']
	height = context.user_data['height']
	age = context.user_data['age']
	activity = context.user_data['activity']

	base_cal = (655.1 + (9.563 * weight) + (2.35 * height) - (4.676 * age)) * activity
	if goal.lower() == "–ø–æ—Ö—É–¥–µ—Ç—å":
		base_cal *= 0.75

	calories = int(round(base_cal / 100) * 100)
	calories = max(1100, min(1900, calories))
	logger.info("calculated calories=%s", calories)

	buy_url = f"https://orlowa.ru/calculator/{calories}"
	button = InlineKeyboardMarkup([
		[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=buy_url)]
	])
	restart_inline = InlineKeyboardMarkup([
		[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
	])

	# –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏
	folder_path = f"menus/{calories}"
	if os.path.exists(folder_path):
		await context.bot.send_message(
		chat_id=query.message.chat.id,
		text=f"–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç {calories} –∫–∫–∞–ª –≤ –¥–µ–Ω—å. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–Ω–æ–µ –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π:"
		)
		files_sent = 0
		for filename in os.listdir(folder_path):
			if files_sent >= 3:
				break
			file_path = os.path.join(folder_path, filename)
			if os.path.isfile(file_path):
				try:
					await context.bot.send_document(
						chat_id=query.message.chat.id,
						document=open(file_path, "rb")
					)
					files_sent += 1
				except Exception as e:
					logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
	else:
		await context.bot.send_message(
			chat_id=query.message.chat.id,
			text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–Ω—é –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
		)
	menus_folder = "menus"
	other_files_sent = 0
	if os.path.exists(menus_folder):
		for item in os.listdir(menus_folder):
			file_path = os.path.join(menus_folder, item)
			if os.path.isfile(file_path):
				try:
					await context.bot.send_document(
						chat_id=query.message.chat.id,
						document=open(file_path, "rb")
					)
					other_files_sent += 1
					if other_files_sent >= 3:
						break
				except Exception as e:
					logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
	else:
		logger.warning("–ü–∞–ø–∫–∞ 'menus' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
			
	await context.bot.send_message(
		chat_id=query.message.chat.id,
		text="–ú–µ–Ω—é –Ω–∞ 30 –¥–Ω–µ–π –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
		reply_markup=button
	)
	
	await context.bot.send_message(
		chat_id=query.message.chat.id,
		text="–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
		reply_markup=restart_inline
	)
	return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext):
	logger.info("cancel called")
	await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=ReplyKeyboardRemove())
	return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
	TOKEN = os.environ.get("TELEGRAM_TOKEN")
	if not TOKEN:
		logger.error("TELEGRAM_TOKEN environment variable not set!")
		return
	app = ApplicationBuilder().token(TOKEN).build()

	conv_handler = ConversationHandler(
		entry_points=[
			CommandHandler("start", start),
			CallbackQueryHandler(restart_callback, pattern="^restart$")
		],
		states={
			WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
			HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
			AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
			ACTIVITY: [CallbackQueryHandler(get_activity)],
			GOAL: [CallbackQueryHandler(get_goal)],
		},
		fallbacks=[
		CommandHandler("cancel", cancel),
		CommandHandler("start", start)  # –¥–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã /start —Ä–∞–±–æ—Ç–∞–ª –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
	],
	)

	app.add_handler(conv_handler)
	app.add_error_handler(error_handler)

	webhook_base_url = os.environ.get("WEBHOOK_BASE_URL")
	if webhook_base_url:
		webhook_url = webhook_base_url.rstrip("/") + f"/{TOKEN}"
		logger.info(f"Setting webhook to {webhook_url}")
		app.run_webhook(
			listen="0.0.0.0",
			port=int(os.environ.get('PORT', 8443)),
			url_path=TOKEN,
			webhook_url=webhook_url,
			allowed_updates=Update.ALL_TYPES,
		)
	else:
		logger.warning("WEBHOOK_BASE_URL is not set. Falling back to run_polling().")
		app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
	main()
